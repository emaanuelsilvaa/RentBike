IMPLEMENTATION rent_bike_i
REFINES rent_bike

SEES Context

CONCRETE_VARIABLES 
    rentedBikes_i, bikeDiscounts_i 
    
INVARIANT
    rentedBikes_i : USERS  +-> BIKES
    & ran(rentedBikes_i) = bikes
    & bikeDiscounts_i : BIKES --> 0..max_discount
    & dom(bikeDiscounts_i) = bikes
    

INITIALISATION
    
    VAR ii IN
       ii := 0;
       WHILE (ii <= sze) DO 
           rentedBikes_i(ii) := 0;
           bikeDiscounts_i(ii) := 0;
           ii := ii + 1
       INVARIANT !nn . (nn:0..(ii-1) => (rentedBikes_i(ii) = 0 & bikeDiscounts_i(ii) = 0))
       VARIANT (sze - ii)
       END          
   END
    

OPERATIONS
    remove_user(uu) =
        BEGIN
            IF rentedBikes_i(uu) = 0
            THEN
                delete_user(uu)
            END
        END;

    add_bike(bb) =
        BEGIN
            create_bike(bb)
        END;

    remove_bike(bb) =
        BEGIN
            delete_bike(bb);
            bikeDiscounts_i(bb) := 0
        END;

    
    rentBike(uu, bb) = 
        PRE uu : users & bb : bikes
        THEN
            IF uu : dom(credits)
               & uu : dom(fidelities)
               & fidelities(uu) < max_fidelity
               & uu /: dom(rentedBikes)
               & bb /: ran(rentedBikes)
               & bb /: dom(bikeDiscounts)
               & credits(uu) >= 2 * rent_value // so deve ser possivel alugar alguma coisa se tiver 2x o rent_value
               & (uu, bb) /: rentedBikes
            THEN 
                rentedBikes := rentedBikes \/ {uu |-> bb} 
                || rent(uu, rent_value)
            ELSIF 
                uu : dom(credits)
                & uu : dom(fidelities)
                & fidelities(uu) < max_fidelity
                & uu /: dom(rentedBikes)
                & bb /: ran(rentedBikes)
                & bb : dom(bikeDiscounts)
                & credits(uu) + bikeDiscounts(bb) >= rent_value // TODO: Ajustar essa condicional para respeitar invariant de User
            THEN 
                rentedBikes := rentedBikes \/ {uu |-> bb} 
                || rent(uu, rent_value - bikeDiscounts(bb)) 
            ELSIF 
                uu : dom(fidelities)
                & fidelities(uu) = max_fidelity
                & uu /: dom(rentedBikes)
                & bb /: ran(rentedBikes)
                & bb /: dom(bikeDiscounts)
            THEN
                rentedBikes := rentedBikes \/ {uu |-> bb} 
                || reset_fidelity(uu)
            END
        END;

    
    return_bike(uu, bb) =
        PRE uu : users
            & bb : bikes
            & (uu, bb) : rentedBikes
            & bb : dom(bikesHelth)
            & uu : dom(credits)
            & credits(uu) > rent_value
        THEN 
            IF bikesHelth(bb) < minimun_helth
            THEN 
                rentedBikes := rentedBikes - {uu |-> bb}
                || reset_helth(bb)
                || remove_credit(uu, rent_value)
            ELSE
                rentedBikes := rentedBikes - {uu |-> bb}
                || reset_helth(bb)
            END
        END;


    evaluate_bike(bb, dm) =
        PRE bb : bikes
            & bb : dom(bikesHelth)
            & bb : ran(rentedBikes)
            & dm : 0..max_helth
        THEN
            set_damage(bb, dm)
        END;


    createDiscount(bb, disc) =
        PRE bb : bikes
            & disc : 1..max_discount
            & bb : dom(bikeDiscounts)
            & bb /: ran(rentedBikes)
        THEN 
            bikeDiscounts(bb) := disc
        END

 END